{"version":3,"file":"index.modern.js","sources":["../src/VideoLightbox.js","../src/utility.js","../src/AnimImage.js","../src/SlideshowLightbox.js","../src/index.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport { motion, AnimatePresence, AnimateSharedLayout } from 'framer-motion'\r\nimport {  XLg,  } from 'react-bootstrap-icons';\r\n\r\nconst themes = {\r\n  day: { background: 'white', iconColor: 'black' },\r\n  night: { background: '#151515', iconColor: 'silver' },\r\n  lightbox: { background: 'rgba(0, 0, 0, 0.4)', iconColor: 'silver' }\r\n}\r\n\r\nconst defaultTheme = 'lightbox'\r\n\r\nexport const VideoLightbox = (props) => {\r\n  const [isOverlayDisplayed, setIsOverlayDisplayed] = useState(false)\r\n  const [iconColor, setIconColor] = useState(\r\n    props.iconColor ? props.iconColor : themes[defaultTheme].iconColor\r\n  )\r\n\r\n  const [backgroundColor, setBackgroundColor] = React.useState(\r\n    props.backgroundColor ? props.backgroundColor : themes['lightbox']\r\n  )\r\n  const [state, setState] = React.useState()\r\n  const bodyRef = useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    if (props.theme) {\r\n      if (themes[props.theme]) {\r\n        setBackgroundColor(themes[props.theme].background)\r\n        setIconColor(themes[props.theme].iconColor)\r\n      }\r\n    }\r\n  }, [state])\r\n\r\n  return (\r\n    <div className=\"lightboxjs\">\r\n      <AnimateSharedLayout type='crossfade'>\r\n        <AnimatePresence>\r\n          {isOverlayDisplayed !== false && (\r\n            <motion.div\r\n              initial={{ opacity: 0 }}\r\n              exit={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              key='videoOverlay'\r\n              style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                backgroundColor: backgroundColor,\r\n                width: '100vw',\r\n                height: '100vh',\r\n                zIndex: 999999\r\n              }}\r\n              className={`slideshowAnimContainer`}\r\n              onClick={() => setIsOverlayDisplayed(false)}\r\n            >\r\n              <div className='lightboxContainer'>\r\n                <section\r\n                  className='iconsHeader imageModal'\r\n                  style={{ color: iconColor }}\r\n                >\r\n                  {/* <FontAwesomeIcon icon={isFullScreen ? \"compress\" : \"expand\"} onClick={() => {isFullScreen ? exitFullScreen() : fullScreen()}} /> */}\r\n                  <motion.div whileTap={{scale: 0.95}} className=\"closeIcon\">\r\n\r\n                    <XLg onClick={() => {setIsOverlayDisplayed(false) }} />\r\n                  </motion.div>\r\n\r\n                </section>\r\n\r\n                <motion.div\r\n                  className='slideshowInnerContainer imageModal'\r\n                  key={'image'}\r\n                  onAnimationComplete={() => {\r\n                    setIsAnimating(false)\r\n                  }}\r\n                  onAnimationStart={() => {\r\n                    setIsAnimating(true)\r\n                  }}\r\n                >\r\n                  <motion.video\r\n                    //   onClick={() => setIsOverlayDisplayed(props.image.title)}\r\n                    layoutId={'vidMotion-' + props.id}\r\n                    //  style={{ height: \"50vh\", width: \"50vw\"}}\r\n                    className={`cursor-pointer m-auto`}\r\n                    key={props.id}\r\n                    controls\r\n                  >\r\n                    <source src={props.videoSrc} type='video/mp4' />\r\n                  </motion.video>\r\n                </motion.div>\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n\r\n          {/* {isOverlayDisplayed === false && (  */}\r\n\r\n          <motion.video\r\n            //   src={props.image.src}\r\n            onClick={() => setIsOverlayDisplayed(props.id)}\r\n            layoutId={'vidMotion-' + props.id}\r\n            className={`cursor-pointer`}\r\n            key={props.id}\r\n            width={500}\r\n            controls={false}\r\n            poster={props.posterUrl}\r\n          >\r\n            <source src={props.videoSrc} type='video/mp4' />\r\n          </motion.video>\r\n\r\n          {/* )} */}\r\n        </AnimatePresence>\r\n      </AnimateSharedLayout>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\n\r\nexport const wrapNums = (minNum, maxNum, v) => {\r\n      let rangeSize = maxNum - minNum;\r\n      return ((((v - minNum) % rangeSize) + rangeSize) % rangeSize) + minNum;\r\n};\r\n\r\nexport const useInterval = (callback, timeDelay) => {\r\n      const savedCallbackRef = useRef();\r\n    \r\n      useEffect(() => {\r\n        savedCallbackRef.current = callback;\r\n      }, [callback]);\r\n    \r\n      useEffect(() => {\r\n        function tick() {\r\n          savedCallbackRef.current();\r\n        }\r\n        if (timeDelay !== null) {\r\n          // Set the interval\r\n          let intervalID = setInterval(tick, timeDelay);\r\n\r\n          // Remove the interval\r\n          return () => clearInterval(intervalID);\r\n        }\r\n      }, [timeDelay]);\r\n}\r\n\r\nexport const openFullScreen = (lightbox_elem) => {\r\n  if (lightbox_elem.requestFullscreen) {\r\n    lightbox_elem.requestFullscreen();\r\n  } \r\n\r\n  /* Safari */\r\n  else if (lightbox_elem.webkitRequestFullscreen) { \r\n    lightbox_elem.webkitRequestFullscreen();\r\n  } \r\n  \r\n  /* Internet Explorer */\r\n  else if (lightbox_elem.msRequestFullscreen) { \r\n    lightbox_elem.msRequestFullscreen();\r\n  }\r\n}\r\n\r\nexport const closeFullScreen = (document) => {\r\n  if (document.exitFullscreen) {\r\n    document.exitFullscreen();\r\n  } \r\n\r\n  /* Safari */\r\n  else if (document.webkitExitFullscreen) { \r\n    document.webkitExitFullscreen();\r\n  } \r\n  \r\n  /* Internet Explorer */\r\n  else if (document.msExitFullscreen) { \r\n    document.msExitFullscreen();\r\n  }\r\n}\r\n\r\nexport const swipePower = (offset, velocity) => {\r\n    return Math.abs(offset) * velocity;\r\n};\r\n\r\nexport const isBrowser = () => typeof window !== \"undefined\"","import React , {useEffect, useState, useRef} from 'react'\r\nimport { motion, AnimatePresence, AnimateSharedLayout } from 'framer-motion';\r\nimport {useInterval, wrapNums, openFullScreen, closeFullScreen} from \"./utility\";\r\nimport { MapInteractionCSS } from '@silvia-odwyer/react-map-interaction-fork';\r\nimport {cover, contain} from 'intrinsic-scale';\r\nimport {  ZoomIn, ZoomOut,Fullscreen, Search, XLg, GridFill} from 'react-bootstrap-icons';\r\nimport { isBrowser } from './utility'; \r\nimport {Portal} from \"react-portal\";\r\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'\r\n\r\nconst themes = {\"day\": {background: \"white\", iconColor: \"black\"}, \"night\": {background: \"#151515\", iconColor: \"silver\"}, \r\n                \"lightbox\": {background: \"rgba(0, 0, 0, 0.4)\", iconColor: \"silver\"}};\r\n                \r\nconst defaultTheme = \"lightbox\";\r\nconst maxScale = 2.6;\r\nconst minScale = 1;\r\nconst defaultMapInteractionValue = {scale: 1, translation: { x: 0, y: 0 }};\r\n\r\nexport const AnimImage = ({children, ...props}) => {\r\n  const [isOverlayDisplayed, setIsOverlayDisplayed] = useState(false);\r\n  const [isZoomed, setIsZoomed] = useState(false);\r\n  const [zoomImg, setZoomImg] = useState(0);\r\n  const [isFullScreenImage, setIsFullScreenImage] = useState(props.fullScreenImage ? props.fullScreenImage : false);\r\n  const [roundedImage, setRoundedImage] = useState(props.roundedImage ? props.roundedImage : true);\r\n\r\n  const [imgContainHeight, setImgContainHeight] = useState(500);\r\n  const [imgContainWidth, setImgContainWidth] = useState(426);\r\n  const [imgLayoutID, setImgLayoutID] = useState(props.imgAnimation ? props.imgAnimation : \"imgMotion-\");\r\n  const [backgroundColor, setBackgroundColor] = useState(props.backgroundColor ? props.backgroundColor : themes[defaultTheme].background);\r\n  const [iconColor, setIconColor] = useState(props.iconColor ? props.iconColor : themes[defaultTheme].iconColor);\r\n  const [state, setState] = React.useState();\r\n  const [panImage, setPanImage] = useState(true);\r\n  const [mapInteractionValue, setMapInteractionValue] = useState(defaultMapInteractionValue);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const imgElem = useRef(null);\r\n\r\n  const changeCursor = (cursor_name) => {\r\n    let container = imgElem.current.parentElement.parentElement;\r\n    container.style.cursor = `${cursor_name}`;\r\n  }\r\n\r\n  const checkModalClick = (e) => {\r\n\r\n    const modals = document.getElementsByClassName('imageModal');\r\n    let arr_modals = Array.from(modals);\r\n\r\n    for (let i =0; i < arr_modals.length; i++) {\r\n      let elem = arr_modals[i];\r\n      let clickInside = elem.contains(e.target)\r\n    \r\n      if (clickInside) {\r\n         return;\r\n      }\r\n    }\r\n    \r\n    setIsOverlayDisplayed(false);\r\n\r\n  }\r\n\r\n  // get image dimensions required to contain image in \r\n  // lightbox container\r\n  function getImageDimensions(url){   \r\n\r\n  }\r\n\r\n  const loadImage = (imageUrl) => {\r\n    const img = new Image();\r\n    img.src = imageUrl;\r\n  \r\n    img.onload = () => {\r\n      let { width, height, x, y } = contain(screen.width * 0.92, screen.height * 0.8, img.naturalWidth, img.naturalHeight);\r\n      setImgContainHeight(height);\r\n      setImgContainWidth(width);\r\n    };\r\n    img.onerror = (err) => {\r\n      console.error(err);\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    loadImage(props.image.src);\r\n\r\n      if (props.theme) {\r\n        if (themes[props.theme]) {\r\n          setBackgroundColor(themes[props.theme].background);\r\n          setIconColor(themes[props.theme].iconColor);\r\n\r\n        }\r\n      }\r\n\r\n      let reducedMotionMediaQuery = checkAndInitReducedMotion();\r\n\r\n      return () => {\r\n        reducedMotionMediaQuery.removeEventListener(\"change\", reducedMotionMediaQuery)\r\n      };\r\n\r\n\r\n  }, [state]);\r\n\r\n \r\n  const initSmoothZoom = () => {\r\n    let container = imgElem.current.parentElement;\r\n    container.style.transition = \"transform 0.2s\";\r\n  }\r\n\r\n  const removeSmoothZoom = () => {\r\n    let container = imgElem.current.parentElement;\r\n    container.style.transition = \"\";\r\n  }\r\n\r\n  const smoothZoomTimeout = () => {\r\n    setTimeout(() => {\r\n      initSmoothZoom();\r\n    }, 300)\r\n  }\r\n\r\n    \r\n  const zoomIn = () => {\r\n    changeCursor(\"zoom-out\");\r\n    setIsZoomed(true);\r\n    setZoomImg(zoomImg + 1);\r\n  }\r\n  \r\n  const zoomOut = () => {\r\n    changeCursor(\"zoom-in\");\r\n    setIsZoomed(false);\r\n    setZoomImg(zoomImg - 1);\r\n  }\r\n\r\n  const closeLightbox = () => {\r\n    resetMapInteractionValue();\r\n\r\n    setIsOverlayDisplayed(false);\r\n  }\r\n\r\n  const resetMapInteractionValue = () => {\r\n    setMapInteractionValue({scale: 1, translation: { x: 0, y: 0 }});\r\n  }\r\n\r\n  const reinitZoomSettings = (value) => {\r\n\r\n    // if user zoomed in\r\n    if (value.scale > mapInteractionValue.scale) {\r\n      setIsZoomed(true)  \r\n      initSmoothZoom();\r\n    }\r\n    // if user zoomed out\r\n    else if (value.scale < mapInteractionValue.scale) {\r\n      setIsZoomed(false);\r\n      initSmoothZoom();\r\n    }\r\n\r\n    // user panned image, did not zoom\r\n    else {\r\n      removeSmoothZoom();\r\n    }\r\n  }\r\n\r\n  const setReducedMotion = (mediaQuery) => {\r\n    if (mediaQuery.matches) {\r\n      setImgLayoutID(null);\r\n    }\r\n  }                                            \r\n\r\n  // Check if the user has a preference for reduced motion\r\n  // If so, the image animation transitions between slides in the slideshow will be adjusted \r\n  // to account for this\r\n  const checkAndInitReducedMotion = () => {\r\n    let reducedMotionMediaQuery;\r\n    if (isBrowser) {\r\n      reducedMotionMediaQuery = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\n\r\n      if (!reducedMotionMediaQuery || reducedMotionMediaQuery.matches) {\r\n        setImgLayoutID(null)\r\n      }\r\n  \r\n      reducedMotionMediaQuery.addEventListener(\"change\", setReducedMotion(reducedMotionMediaQuery));\r\n    }\r\n\r\n    return reducedMotionMediaQuery;\r\n  }\r\n\r\n  const mapInteractionChange = (value) => {\r\n    setPanImage(false); \r\n\r\n    reinitZoomSettings(value)\r\n\r\n    setMapInteractionValue(value)\r\n\r\n    if (value.scale == defaultMapInteractionValue.scale) {\r\n      setPanImage(true);\r\n      resetMapInteractionValue();\r\n\r\n      smoothZoomTimeout();\r\n    }\r\n\r\n    else if (value.scale > defaultMapInteractionValue.scale && !isAnimating) {\r\n      changeCursor(\"all-scroll\")\r\n    }\r\n    \r\n  }\r\n    return (\r\n      <div className=\"lightboxjs\">\r\n        <AnimatePresence>\r\n\r\n          <motion.img\r\n            {...props}\r\n            src={props.image.src}\r\n            onClick={() => setIsOverlayDisplayed(props.image.title)}\r\n            // layoutId={\"imgMotion-\" + props.image.title}\r\n            whileTap={{scale: 0.97}}\r\n            style={props.style}\r\n            className=\"cursor-pointer\"\r\n            key={props.image.title}\r\n          />\r\n\r\n        <Portal>\r\n          <AnimatePresence>\r\n\r\n            {isOverlayDisplayed !== false && (\r\n\r\n              <motion.div\r\n                initial={{ opacity: 0 }}\r\n                exit={{ opacity: 0 } }\r\n                animate={{ opacity: 1,}}\r\n                key=\"imgOverlay\"\r\n                style={{\r\n                  position: \"fixed\",\r\n                  top: 0,\r\n                  left: 0,\r\n                  backgroundColor: backgroundColor, \r\n                  width: \"100vw\", \r\n                  height: \"100vh\",\r\n                  zIndex: 999999,\r\n                }}\r\n                className = {`flex h-screen slideshowAnimContainer`}\r\n                onClick={(event) => checkModalClick(event)}\r\n              >\r\n                <motion.div className=\"lightboxContainer\">\r\n                  <section className=\"iconsHeader imageModal\" style={{color: iconColor}}>\r\n\r\n                  <motion.div whileTap={{scale: 0.95}}>\r\n                            <ZoomIn onClick={() => zoomIn()} />\r\n                  </motion.div>\r\n\r\n                    <motion.div whileTap={{scale: 0.95}}>\r\n                            <ZoomOut onClick={() => zoomOut()} />\r\n                          </motion.div>\r\n                    {/* <FontAwesomeIcon icon={isFullScreen ? \"compress\" : \"expand\"} onClick={() => {isFullScreen ? exitFullScreen() : fullScreen()}} /> */}\r\n\r\n                    <motion.div whileTap={{scale: 0.95}} className=\"closeIcon\">\r\n\r\n                      <XLg onClick={() => {closeLightbox() }} />\r\n                    </motion.div>\r\n                  </section>\r\n\r\n                  <motion.div className=\"imageInnerContainer imageModal\">\r\n\r\n                     <MapInteractionCSS maxScale={maxScale} minScale={minScale} disablePan={panImage} value={mapInteractionValue}\r\n                    onChange={(value) => {mapInteractionChange(value)}} zoomIn={zoomImg} > \r\n                        <motion.img\r\n                          src={props.image.src}\r\n                          key={\"image\"}\r\n                          // layoutId={\"imgMotion-\" + isOverlayDisplayed}\r\n                          // initial={{ scale: 0.7 }}\r\n                          // exit={{ scale: 0.7, opacity: 0 } }\r\n                          // animate={{scale: 1}}\r\n                          onAnimationComplete={() => {setIsAnimating(false)}}\r\n                          onAnimationStart={() => {setIsAnimating(true)}}\r\n                          className=\"m-auto\"\r\n                          style={{width: imgContainWidth, height: imgContainHeight}}\r\n                          ref={imgElem}\r\n                          onClick={(e) => {\r\n                            if (!e.defaultPrevented) {\r\n                              if (!isZoomed && !isAnimating) {\r\n                                zoomIn()\r\n                              }\r\n                              else {\r\n                              zoomOut();\r\n                              }\r\n                            }\r\n                          }}\r\n                        />\r\n                    </MapInteractionCSS> \r\n\r\n                  </motion.div>\r\n\r\n                </motion.div>\r\n\r\n              </motion.div>\r\n\r\n            )}\r\n            </AnimatePresence>\r\n\r\n          </Portal>\r\n\r\n        </AnimatePresence>\r\n\r\n      </div>\r\n      \r\n  );\r\n\r\n}","import * as React from 'react'\r\nimport { useState, useCallback, useEffect, useRef } from 'react'\r\nimport { motion, AnimatePresence, AnimateSharedLayout } from 'framer-motion'\r\nimport {\r\n  useInterval,\r\n  wrapNums,\r\n  openFullScreen,\r\n  closeFullScreen,\r\n  swipePower\r\n} from './utility'\r\nimport { MapInteractionCSS } from '@silvia-odwyer/react-map-interaction-fork'\r\nimport {\r\n  ZoomIn,\r\n  ZoomOut,\r\n  Fullscreen,\r\n  PlayCircleFill,\r\n  Search,\r\n  PauseCircleFill,\r\n  FullscreenExit,\r\n  XLg,\r\n  GridFill\r\n} from 'react-bootstrap-icons'\r\nimport ScrollContainer from 'react-indiana-drag-scroll'\r\nimport Magnifier from 'react-magnifier'\r\nimport { cover, contain } from 'intrinsic-scale'\r\nimport { isBrowser } from './utility'\r\nimport { Portal } from 'react-portal'\r\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'\r\nimport ReactSwipe from 'react-swipe'\r\n\r\nconst variants = {\r\n  imgDrag: {\r\n    enterImg: (direction) => {\r\n      return {\r\n        x: direction > 0 ? 1000 : -1000,\r\n        opacity: 0\r\n      }\r\n    },\r\n    centerImg: {\r\n      zIndex: 1,\r\n      x: 0,\r\n      opacity: 1\r\n    },\r\n    exitImg: (direction) => {\r\n      return {\r\n        zIndex: 0,\r\n        x: direction < 0 ? 1000 : -1000,\r\n        opacity: 0\r\n      }\r\n    }\r\n  },\r\n  fade: {\r\n    enterImg: (direction) => {\r\n      return {\r\n        opacity: 0\r\n      }\r\n    },\r\n    centerImg: {\r\n      zIndex: 1,\r\n      opacity: 1\r\n    },\r\n    exitImg: (direction) => {\r\n      return {\r\n        zIndex: 0,\r\n        opacity: 0\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet thumbnailVariants = {\r\n  visible: { opacity: 1, y: 0 },\r\n  hidden: { opacity: 0, y: 100 }\r\n}\r\n\r\nconst defaultMapInteractionValue = { scale: 1, translation: { x: 0, y: 0 } }\r\nconst themes = {\r\n  day: {\r\n    background: 'white',\r\n    iconColor: 'black',\r\n    thumbnailBorder: 'solid transparent 2px'\r\n  },\r\n  night: {\r\n    background: '#151515',\r\n    iconColor: 'silver',\r\n    thumbnailBorder: 'solid rgb(138, 138, 138) 2px'\r\n  },\r\n  lightbox: {\r\n    background: 'rgba(12, 12, 12, 0.93)',\r\n    iconColor: 'silver',\r\n    thumbnailBorder: 'solid rgb(138, 138, 138) 2px'\r\n  }\r\n}\r\nconst activeThumbnailBorder = 'solid rgba(107, 133, 206, 0.6) 2px'\r\nconst arrowStyles = {\r\n  light: { background: 'white', color: 'black' },\r\n  dark: { background: '#151515', color: 'silver' }\r\n}\r\n\r\nconst swipeConfidenceThreshold = 10000\r\nconst opacityDuration = 0.2\r\nconst maxScale = 2.6\r\nconst minScale = 1\r\nconst imgSwipeDirection = 'x'\r\nconst defaultTheme = 'night'\r\nconst mobileWidth = 768\r\nconst animTransitionDefault = {\r\n  x: { type: 'spring', stiffness: 300, damping: 30 },\r\n  opacity: { duration: opacityDuration }\r\n}\r\nconst slideshowAnimTransition = {\r\n  opacity: { duration: opacityDuration }\r\n}\r\n\r\nexport const SlideshowLightbox = (props) => {\r\n\r\n  const [[imgSlideIndex, direction], setImgSlideIndex] = useState([0, 0])\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [isSlideshowPlaying, setIsSlideshowPlaying] = useState(false);\r\n  // const [reactSwipeEl, setReactSwipeEl] = useState(false);\r\n\r\n  const [images, setImages] = useState(\r\n    props.children ? props.children.map((obj) => obj.props) : []\r\n  )\r\n  const imageIndex = wrapNums(0, images.length, imgSlideIndex);\r\n  const [reactSwipeOptions, setReactSwipeOptions] = useState(  { continuous: true, startSlide: 0 }    )\r\n\r\n  const [slideshowInterval, setSlideshowInterval] = useState(\r\n    props.slideshowInterval ? props.slideshowInterval : 1100\r\n  )\r\n  const [roundedImages, setRoundedImages] = useState(\r\n    props.roundedImages ? props.roundedImages : true\r\n  )\r\n  const [showControls, setShowControls] = useState(\r\n    props.showControls ? props.showControls : true\r\n  )\r\n  const [lightboxIdentifier, setLightboxIdentifier] = useState(\r\n    props.lightboxIdentifier ? props.lightboxIdentifier : false\r\n  )\r\n  const [imageFullScreen, setImageFullScreen] = useState(\r\n    props.fullScreen ? props.fullScreen : false\r\n  )\r\n  const [licenseKey, setLicenseKey] = useState(\r\n    props.licenseKey ? props.licenseKey : ''\r\n  )\r\n  const [lockAxisY, setLockAxisY] = useState(false)\r\n\r\n  const [isZoomed, setIsZoomed] = useState(false)\r\n  const [animTransition, setAnimTransition] = useState(animTransitionDefault)\r\n  const [panImage, setPanImage] = useState(true)\r\n  const [zoomImg, setZoomImg] = useState(0)\r\n  const [width, setWidth] = useState(0)\r\n  const [mapInteractionValue, setMapInteractionValue] = useState(\r\n    defaultMapInteractionValue\r\n  )\r\n  const [imgSwipeMotion, setImgSwipeMotion] = useState(imgSwipeDirection)\r\n  const [isAnimating, setIsAnimating] = useState(false)\r\n  const [isBrowserFullScreen, setIsBrowserFullScreen] = useState(false)\r\n  const [enableMagnifyingGlass, setMagnifyingGlass] = useState(false)\r\n  const [imagesLoaded, setImagesLoaded] = useState(false)\r\n  const [refIndex, setRefIndex] = useState(0)\r\n\r\n  const [imgContainHeight, setImgContainHeight] = useState(500)\r\n  const [imgContainWidth, setImgContainWidth] = useState(426)\r\n  const [isInit, setIsInit] = useState(false)\r\n  const [imgElems, setImgElems] = useState(false)\r\n\r\n  const [usesDataAttr, setUsesDataAttr] = useState(false)\r\n\r\n  // Thumbnails slider\r\n  const [mouseDown, setMouseDown] = useState(false)\r\n  const [startX, setStartX] = useState(false)\r\n  const [scrollLeft, setScrollLeft] = useState(false)\r\n\r\n  // Refs\r\n  // const imgElemRef = useRef(null);\r\n  // const [imgElem, setImgElem] = useState(null);\r\n  const zoomRef = useRef(null)\r\n  const [zoomBtnRef, setZoomBtnRef] = useState(null)\r\n  const [zoomRefs, setZoomRefs] = useState([])\r\n\r\n  const [zoomBtnRef2, setZoomBtnRef2] = useState(null)\r\n\r\n  // const reactSwipeEl = useRef(null)\r\n  // const [reactSwipeElRef, setReactSwipeElRef] = useState(null)\r\n\r\n  const initZoomRef = (ref) => {\r\n    if (ref) setZoomBtnRef(ref)\r\n    else setZoomBtnRef(null)\r\n  }\r\n\r\n  const initZoomRef2 = (ref) => {\r\n    let refs = zoomRefs\r\n    if (ref) {\r\n      zoomRefs.push(ref)\r\n    }\r\n    // else setZoomBtnRef2(null)\r\n  }\r\n\r\n  \r\n\r\n  // Styling/theming\r\n  const [backgroundColor, setBackgroundColor] = useState(\r\n    props.backgroundColor\r\n      ? props.backgroundColor\r\n      : themes[defaultTheme].background\r\n  )\r\n  const [iconColor, setIconColor] = useState(\r\n    props.iconColor ? props.iconColor : themes[defaultTheme].iconColor\r\n  )\r\n  const [thumbnailBorder, setThumbnailBorder] = useState(\r\n    props.thumbnailBorder\r\n      ? props.thumbnailBorder\r\n      : themes[defaultTheme].thumbnailBorder\r\n  )\r\n\r\n  const [showThumbnails, setShowThumbnails] = useState(\r\n    props.showThumbnails ? props.showThumbnails : false\r\n  )\r\n  const [animatedThumbnails, setAnimatedThumbnails] = useState(\r\n    props.animateThumbnails ? props.animateThumbnails : true\r\n  )\r\n  const [imgAnimation, setImgAnimation] = useState(\r\n    props.imgAnimation ? props.imgAnimation : 'imgDrag'\r\n  )\r\n  // const [slideshowVariants, setSlideshowVariants] = useState(variants[imgAnimation] ? variants[imgAnimation]  : variants[\"imgDrag\"]);\r\n  const [arrowStyle, setArrowStyle] = useState(\r\n    props.arrowStyle ? props.arrowStyle : 'dark'\r\n  )\r\n\r\n  const isMobile = width <= mobileWidth\r\n\r\n  const keyPressHandler = (event) => {\r\n    let key = event.key\r\n\r\n    if (key == 'ArrowLeft') {\r\n      updateCurrentSlide(-1)\r\n    } else if (key == 'ArrowRight') {\r\n      updateCurrentSlide(1)\r\n    } else if (key == 'Escape' && !isBrowserFullScreen) {\r\n      closeModal()\r\n    }\r\n  }\r\n\r\n  function handleWindowResize() {\r\n    setWidth(window.innerWidth)\r\n  }\r\n\r\n  const checkModalClick = (e) => {\r\n    const modals = document.getElementsByClassName('imageModal')\r\n    let arr_modals = Array.from(modals)\r\n\r\n    for (let i = 0; i < arr_modals.length; i++) {\r\n      let elem = arr_modals[i]\r\n      let clickInside = elem.contains(e.target)\r\n\r\n      if (clickInside) {\r\n        return\r\n      }\r\n    }\r\n\r\n    setShowModal(false)\r\n  }\r\n\r\n  const fullScreen = () => {\r\n    let lightbox = document.getElementById('slideshowAnim')\r\n    openFullScreen(lightbox)\r\n    setIsBrowserFullScreen(true)\r\n    initFullScreenChangeEventListeners()\r\n  }\r\n\r\n  const exitFullScreen = () => {\r\n    if (isBrowserFullScreen) {\r\n      closeFullScreen(document)\r\n      setIsBrowserFullScreen(false)\r\n      removeFullScreenChangeEventListeners()\r\n    }\r\n  }\r\n\r\n  const updateCurrentSlide = (newDirection) => {\r\n    resetSlideAnim()\r\n    setMagnifyingGlass(false)\r\n    resetMapInteraction()\r\n    setImgSlideIndex([imgSlideIndex + newDirection, newDirection])\r\n    if (isMobile) {\r\n      setZoomBtnRef(zoomRef)\r\n    }\r\n  }\r\n\r\n  const updateImageSlideshow = (newDirection) => {\r\n    resetMapInteraction()\r\n    setImgSlideIndex([imgSlideIndex + newDirection, newDirection])\r\n  }\r\n\r\n  const resetSlideAnim = () => {\r\n    setAnimTransition(animTransitionDefault)\r\n  }\r\n\r\n  const resetMapInteraction = () => {\r\n    setPanImage(true)\r\n    setMapInteractionValue({ scale: 1, translation: { x: 0, y: 0 } })\r\n    setIsZoomed(false)\r\n  }\r\n\r\n  const setCurrentSlide = (newIndex) => {\r\n    let newDirection\r\n    if (newIndex > imgSlideIndex) {\r\n      newDirection = 1\r\n    } else {\r\n      newDirection = -1\r\n    }\r\n\r\n    setAnimTransition(slideshowAnimTransition)\r\n    resetMapInteraction()\r\n    setImgSlideIndex([newIndex, newDirection])\r\n    reactSwipeEl.slide(newIndex, 500)\r\n  }\r\n\r\n  const closeModal = () => {\r\n    if (isBrowserFullScreen) {\r\n      exitFullScreen()\r\n    }\r\n\r\n    // ensure slideshow is paused\r\n    if (isSlideshowPlaying) {\r\n      setIsSlideshowPlaying(false)\r\n    }\r\n\r\n    resetMapInteraction()\r\n    setIsZoomed(false)\r\n    setShowModal(false)\r\n  }\r\n\r\n  const openModal = (num) => {\r\n    setImgSlideIndex([num, 1])\r\n    setShowModal(true);\r\n    \r\n  }\r\n\r\n  const openModalAndSetSlide = (num) => {\r\n    reactSwipeEl.slide(num, 0)\r\n    \r\n    setImgSlideIndex([num, 1])\r\n    setShowModal(true);\r\n\r\n\r\n  }\r\n\r\n  const playSlideshow = () => {\r\n    setMagnifyingGlass(false)\r\n    setAnimTransition(slideshowAnimTransition)\r\n    updateImageSlideshow(1)\r\n    setIsSlideshowPlaying(true)\r\n  }\r\n\r\n  const stopSlideshow = () => {\r\n    setAnimTransition(animTransitionDefault)\r\n    setIsSlideshowPlaying(false)\r\n  }\r\n\r\n  const zoomIntoImg = () => {\r\n    if (!isMobile) {\r\n      // changeCursor('all-scroll')\r\n      setIsZoomed(true)\r\n    }\r\n    if (zoomBtnRef) {\r\n      zoomBtnRef.zoomIn()\r\n    }\r\n  }\r\n\r\n  const zoomOutFromImg = () => {\r\n    if (!isMobile) {\r\n      changeCursor('zoom-in')\r\n      setIsZoomed(false)\r\n      setZoomImg(zoomImg - 1)\r\n\r\n      if (zoomImg == 1) {\r\n        resetMapInteraction()\r\n      }\r\n    }\r\n\r\n    if (zoomBtnRef) {\r\n      zoomBtnRef.zoomOut()\r\n    }\r\n  }\r\n\r\n  const checkAndUpdateSlide = (offset, velocity) => {\r\n    const swipe = swipePower(offset.x, velocity.x)\r\n\r\n    if (swipe < -swipeConfidenceThreshold || swipe > swipeConfidenceThreshold) {\r\n      setMapInteractionValue({ scale: 1, translation: { x: 0, y: 0 } })\r\n      setPanImage(true)\r\n      if (swipe < -swipeConfidenceThreshold) {\r\n        updateCurrentSlide(1)\r\n      } else if (swipe > swipeConfidenceThreshold) {\r\n        updateCurrentSlide(-1)\r\n      }\r\n    } else {\r\n      removeSmoothZoom()\r\n    }\r\n  }\r\n\r\n  const reinitZoomSettings = (value) => {\r\n    // if user zoomed in\r\n    if (value.scale > mapInteractionValue.scale) {\r\n      setIsZoomed(true)\r\n      initSmoothZoom()\r\n    }\r\n    // if user zoomed out\r\n    else if (value.scale < mapInteractionValue.scale) {\r\n      setIsZoomed(false)\r\n      initSmoothZoom()\r\n    }\r\n\r\n    // user panned image, did not zoom\r\n    else {\r\n      removeSmoothZoom()\r\n    }\r\n  }\r\n\r\n  const mapInteractionChange = (value) => {\r\n    setPanImage(false)\r\n    updateImgSwipeMotion(false)\r\n\r\n    reinitZoomSettings(value)\r\n\r\n    setMapInteractionValue(value)\r\n\r\n    if (value.scale == defaultMapInteractionValue.scale) {\r\n      setPanImage(true)\r\n      setMapInteractionValue({ scale: 1, translation: { x: 0, y: 0 } })\r\n\r\n      updateImgSwipeMotion(imgSwipeDirection)\r\n      smoothZoomTimeout()\r\n    } else if (value.scale > defaultMapInteractionValue.scale && !isAnimating) {\r\n      changeCursor('all-scroll')\r\n    }\r\n  }\r\n\r\n  const updateImgSwipeMotion = (swipeDirection) => {\r\n    setImgSwipeMotion(swipeDirection)\r\n  }\r\n\r\n  const initStyling = () => {\r\n    if (props.theme) {\r\n      if (themes[props.theme]) {\r\n        setBackgroundColor(themes[props.theme].background)\r\n        setIconColor(themes[props.theme].iconColor)\r\n        setThumbnailBorder(themes[props.theme].thumbnailBorder)\r\n      }\r\n    }\r\n\r\n    if (props.fullScreen) {\r\n      if (props.fullScreen == true) {\r\n        setImgAnimation('fade')\r\n        setRoundedImages(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const paneNodes = Array.apply(null, Array(images.length)).map((_, index) => {\r\n    return (\r\n      <div key={index}>\r\n        {enableMagnifyingGlass == true ? (\r\n          <Magnifier\r\n            src={images[index].src}\r\n            className='imageModal mx-auto mt-0 magnifyWrapper'\r\n            height={imgContainHeight}\r\n            width={imgContainWidth}\r\n            mgShowOverflow={false}\r\n            style={{\r\n              width: imgContainWidth,\r\n              height: imgContainHeight\r\n            }}\r\n          />\r\n        ) : 1 == 1 ? (\r\n          <div>\r\n            <TransformWrapper\r\n              ref={initZoomRef2}\r\n              onWheel={{ wheelEvent }}\r\n              onZoom={zoomEvent}\r\n              centerZoomedOut={true}\r\n              initialScale={1}\r\n            >\r\n              <TransformComponent\r\n                wrapperStyle={{ marginLeft: 'auto', marginRight: 'auto' }}\r\n                contentStyle={\r\n                  fullScreen\r\n                    ? {\r\n                        width: '100vw',\r\n                        height: '100vh',\r\n                        marginLeft: 'auto',\r\n                        marginRight: 'auto'\r\n                      }\r\n                    : {\r\n                        width: '100vw',\r\n                        height: '100vh',\r\n                        marginLeft: 'auto',\r\n                        marginRight: 'auto'\r\n                      }\r\n                }\r\n                key={index}\r\n              >\r\n                <img\r\n                  className={`mx-auto ${\r\n                    imageFullScreen ? '' : 'object-contain'\r\n                  } imageModal ${roundedImages ? 'rounded-lg' : ''}`}\r\n                  src={images[index].src}\r\n                  id='img'\r\n                />\r\n              </TransformComponent>\r\n            </TransformWrapper>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    )\r\n  })\r\n\r\n  const initMagnifyingGlass = () => {\r\n    if (!enableMagnifyingGlass) {\r\n      initImageDimensions()\r\n    } else {\r\n      setImgAnimation('imgDrag')\r\n    }\r\n    setMagnifyingGlass(!enableMagnifyingGlass)\r\n  }\r\n\r\n  const initImageDimensions = () => {\r\n    console.log('Init img dimensions ')\r\n    let img = document.getElementById('img')\r\n    let imageContainerH, imageContainerW\r\n    if (isMobile) {\r\n      imageContainerW = 0.92\r\n\r\n      // horizontal image\r\n      if (img.naturalWidth > img.naturalHeight) {\r\n        imageContainerH = 0.65\r\n      }\r\n      //vertical image\r\n      else {\r\n        imageContainerH = 0.57\r\n      }\r\n\r\n      // remove dragging motion\r\n    } else {\r\n      imageContainerW = 0.92\r\n      imageContainerH = 0.71\r\n    }\r\n\r\n    let { width, height, x, y } = contain(\r\n      screen.width * imageContainerW,\r\n      screen.height * imageContainerH,\r\n      img.naturalWidth,\r\n      img.naturalHeight\r\n    )\r\n\r\n    console.log('Width ', width)\r\n    console.log('height ', height)\r\n    setImgContainHeight(height)\r\n    setImgContainWidth(width)\r\n  }\r\n\r\n  const changeCursor = (cursor_name) => {\r\n    if (!enableMagnifyingGlass) {\r\n      let imgElem = document.getElementById('img')\r\n      let container = imgElem.parentElement.parentElement\r\n      container.style.cursor = `${cursor_name}`\r\n    }\r\n  }\r\n\r\n  const removeDragEffect = (ref, e) => {\r\n    console.log('call remove effect')\r\n    setImgAnimation('')\r\n  }\r\n\r\n  const zoomEvent = (ref, e) => {\r\n    console.log('ZOOM EVENT ', ref)\r\n\r\n    if (ref.state.scale == 1) {\r\n      setImgAnimation('imgDrag')\r\n      setImgSwipeMotion(imgSwipeDirection)\r\n      console.log('reinit drag anim')\r\n    } else {\r\n      // setImgAnimation(\"fade\");\r\n    }\r\n  }\r\n\r\n  const wheelEvent = (ref, e) => {\r\n    console.log('WHEEL EVENT ', ref)\r\n    setImgAnimation('fade')\r\n\r\n    setLockAxisY(false)\r\n    // if (ref.state.scale == 1) {\r\n    //   setImgAnimation(\"imgDrag\");\r\n    //   setImgSwipeMotion(imgSwipeDirection)\r\n    //   console.log(\"reinit drag anim\")\r\n    // }\r\n  }\r\n\r\n  const initSmoothZoom = () => {\r\n    if (!enableMagnifyingGlass) {\r\n      let imgElem = document.getElementById('img')\r\n\r\n      let container = imgElem.parentElement\r\n      container.style.transition = 'transform 0.2s'\r\n    }\r\n  }\r\n\r\n  const removeSmoothZoom = () => {\r\n    if (!enableMagnifyingGlass) {\r\n      let imgElem = document.getElementById('img')\r\n\r\n      let container = imgElem.parentElement\r\n      container.style.transition = ''\r\n    }\r\n  }\r\n\r\n  const initFullScreenChangeEventListeners = () => {\r\n    document.addEventListener('fullscreenchange', exitFullScreen)\r\n    document.addEventListener('webkitfullscreenchange', exitFullScreen)\r\n    document.addEventListener('MSFullscreenChange', exitFullScreen)\r\n    document.addEventListener('mozfullscreenchange', exitFullScreen)\r\n  }\r\n\r\n  const removeFullScreenChangeEventListeners = () => {\r\n    document.removeEventListener('fullscreenchange', exitFullScreen)\r\n    document.removeEventListener('webkitfullscreenchange', exitFullScreen)\r\n    document.removeEventListener('MSFullscreenChange', exitFullScreen)\r\n    document.removeEventListener('mozfullscreenchange', exitFullScreen)\r\n  }\r\n\r\n  const initKeyboardEventListeners = () => {\r\n    document.addEventListener('keydown', keyPressHandler)\r\n\r\n    if (isBrowser) {\r\n      window.addEventListener('resize', handleWindowResize)\r\n    }\r\n  }\r\n\r\n  const removeKeyboardEventListeners = () => {\r\n    if (isBrowser) {\r\n      window.removeEventListener('resize', handleWindowResize)\r\n      document.removeEventListener('keydown', keyPressHandler)\r\n    }\r\n  }\r\n\r\n  const smoothZoomTimeout = () => {\r\n    setTimeout(() => {\r\n      initSmoothZoom()\r\n    }, 300)\r\n  }\r\n\r\n  const setReducedMotion = (mediaQuery) => {\r\n    if (mediaQuery.matches) {\r\n      setImgAnimation('fade')\r\n    }\r\n  }\r\n\r\n  // Check if the user has a preference for reduced motion\r\n  // If so, the image animation transitions between slides in the slideshow will be adjusted\r\n  // to account for this\r\n  const checkAndInitReducedMotion = () => {\r\n    let reducedMotionMediaQuery = ''\r\n\r\n    if (isBrowser) {\r\n      reducedMotionMediaQuery = window.matchMedia(\r\n        '(prefers-reduced-motion: reduce)'\r\n      )\r\n\r\n      if (!reducedMotionMediaQuery || reducedMotionMediaQuery.matches) {\r\n        setImgAnimation('fade')\r\n      }\r\n\r\n      reducedMotionMediaQuery.addEventListener(\r\n        'change',\r\n        setReducedMotion(reducedMotionMediaQuery)\r\n      )\r\n    }\r\n\r\n    return reducedMotionMediaQuery\r\n  }\r\n\r\n  const initProps = () => {\r\n    if (props.showControls != undefined) {\r\n      setShowControls(props.showControls)\r\n    }\r\n\r\n    if (isBrowser) {\r\n      setWidth(window.innerWidth)\r\n    }\r\n\r\n    if (window.innerWidth <= mobileWidth) {\r\n      setImgAnimation('fade')\r\n    }\r\n  }\r\n\r\n  // Slideshow feature; if isSlideshowPlaying set to true, then slideshow cycles through images\r\n  useInterval(\r\n    () => {\r\n      updateImageSlideshow(1)\r\n    },\r\n    isSlideshowPlaying ? slideshowInterval : null\r\n  )\r\n\r\n  useEffect(() => {\r\n    console.log(\"use effect\", props.fullScreen)\r\n    initProps()\r\n\r\n    // setImgElem(imgElemRef.current)\r\n    initKeyboardEventListeners()\r\n\r\n    let reducedMotionMediaQuery = checkAndInitReducedMotion()\r\n\r\n    if (!isInit) {\r\n      if (lightboxIdentifier) {\r\n        let img_gallery = document.querySelectorAll('[data-lightboxjs]')\r\n        let img_elements = []\r\n\r\n        let usesAttr = false\r\n        if (img_gallery.length > 0) {\r\n          for (let i = 0; i <= img_gallery.length - 1; i++) {\r\n            let img = img_gallery[i]\r\n\r\n            let attr_val = img.getAttribute('data-lightboxjs')\r\n            if (attr_val == lightboxIdentifier) {\r\n              img.addEventListener(\r\n                'click',\r\n                () => {\r\n                  let reactSwipeOptionConfig = reactSwipeOptions;\r\n                  reactSwipeOptionConfig.startSlide = i;\r\n                  setReactSwipeOptions(reactSwipeOptionConfig);\r\n                  openModal(i)\r\n                },\r\n                false\r\n              )\r\n              img.classList.add('cursor-pointer')\r\n              usesAttr = true\r\n              img_elements.push({ src: img.src, alt: img.alt })\r\n            }\r\n          }\r\n\r\n          if (usesAttr) {\r\n            setUsesDataAttr(true)\r\n          }\r\n\r\n          setImages(img_elements)\r\n        }\r\n      } else {\r\n        if (props.children) {\r\n          setImages(\r\n            props.children\r\n              .filter((elem) => elem.type == 'img')\r\n              .map((obj) => obj.props)\r\n          )\r\n        }\r\n      }\r\n\r\n      setIsInit(true)\r\n    };\r\n\r\n    initStyling()\r\n    return () => {\r\n      removeKeyboardEventListeners()\r\n      reducedMotionMediaQuery.removeEventListener(\r\n        'change',\r\n        reducedMotionMediaQuery\r\n      )\r\n    }\r\n  }, [keyPressHandler])\r\n\r\n\r\n  let rows = []\r\n  for (let index = 0; index < images.length; index++) {\r\n    // note: we are adding a key prop here to allow react to uniquely identify each\r\n    // element in this array. see: https://reactjs.org/docs/lists-and-keys.html\r\n    rows.push(\r\n      <div key={index}>\r\n        <div>\r\n          <h1>{index}</h1>\r\n          {enableMagnifyingGlass == true ? (\r\n            <Magnifier\r\n              src={images[index].src}\r\n              className='imageModal mt-0 magnifyWrapper'\r\n              height={imgContainHeight}\r\n              width={imgContainWidth}\r\n              mgShowOverflow={false}\r\n              style={{\r\n                width: imgContainWidth,\r\n                height: imgContainHeight\r\n              }}\r\n            />\r\n          ) : (\r\n            <div>\r\n              <TransformComponent\r\n                wrapperStyle={{ marginLeft: 'auto', marginRight: 'auto' }}\r\n                contentStyle={\r\n                  fullScreen\r\n                    ? {\r\n                        width: '100vw',\r\n                        height: '100vh',\r\n                        marginLeft: 'auto',\r\n                        marginRight: 'auto'\r\n                      }\r\n                    : {\r\n                        width: '30vw',\r\n                        height: '100vh',\r\n                        marginLeft: 'auto',\r\n                        marginRight: 'auto'\r\n                      }\r\n                }\r\n                key={index}\r\n              >\r\n                <img\r\n                  className={`mx-auto ${\r\n                    imageFullScreen ? '' : 'object-contain'\r\n                  } imageModal ${roundedImages ? 'rounded-lg' : ''}`}\r\n                  src={images[index].src}\r\n                  id='img'\r\n                />\r\n              </TransformComponent>\r\n            </div>\r\n          )}\r\n        </div>\r\n        ;\r\n      </div>\r\n    )\r\n  }\r\n  let reactSwipeEl;\r\n  return (\r\n    <div class={`${props.className} lightboxjs`}>\r\n      {lightboxIdentifier != false ? props.children : null}\r\n          {/* Gallery images */}\r\n          {lightboxIdentifier != false\r\n            ? null\r\n            : props.children\r\n                .filter((elem) => elem.type == 'img')\r\n                .map((elem, index) => (\r\n                  <img\r\n                    {...elem.props}\r\n                    class={elem.props.className + ' cursor-pointer'}\r\n                    onClick={() => {\r\n                      console.log(\"hi2\")\r\n                      let reactSwipeOptionConfig = reactSwipeOptions;\r\n                      reactSwipeOptionConfig.startSlide = index;\r\n                      setReactSwipeOptions(reactSwipeOptionConfig);\r\n                      openModal();\r\n                    }}\r\n                    key={index}\r\n                    whileTap={{ scale: 0.97 }}\r\n                  />\r\n                ))}\r\n      <AnimateSharedLayout type='crossfade'>\r\n        <AnimatePresence initial={false}>\r\n\r\n\r\n          {showModal !== false && (\r\n            <Portal>\r\n              <motion.div\r\n                className='slideshowAnimContainer'\r\n                key='slideshowAnimContainer'\r\n                id='slideshowAnim'\r\n                // onClick={(event) => {if (!isZoomed) checkModalClick(event)}}\r\n\r\n                initial={{ opacity: 0, scale: 0.98 }}\r\n                exit={{ opacity: 0, scale: 0.98 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                transition={{\r\n                  duration: 0.2\r\n                }}\r\n              >\r\n                {/* <TransformWrapper\r\n                          ref={initZoomRef}\r\n                          onWheel={{ wheelEvent }}\r\n                          onZoom={zoomEvent}\r\n                          centerZoomedOut={true}\r\n                          initialScale={1}\r\n\r\n                        >\r\n                          {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\r\n          <React.Fragment> */}\r\n\r\n                <div\r\n                  className={`lightboxContainer`}\r\n                  style={{\r\n                    backgroundColor: backgroundColor\r\n                  }}\r\n                >\r\n                  <section\r\n                    className={\r\n                      'iconsHeader imageModal ' + arrowStyle + '_header_icon'\r\n                    }\r\n                    style={{ color: iconColor }}\r\n                  >\r\n                    {/* <button onClick={() => {console.log(\"img slide index prev \", imgSlideIndex); setCurrentSlide(imgSlideIndex + 1); console.log(\"img slide index \", imgSlideIndex); \r\n                        reactSwipeEl.next(); }}>N</button>\r\n      <button onClick={() => reactSwipeEl.prev()}>P</button> */}\r\n                    {showControls && (\r\n                      <div className='controls'>\r\n                        <motion.div whileTap={{ scale: 0.95 }}>\r\n                          <ZoomIn\r\n                            onClick={() => {\r\n                              console.log('zoom refs', zoomRefs[refIndex])\r\n                              zoomRefs[refIndex].zoomIn()\r\n                            }}\r\n                          />\r\n                        </motion.div>\r\n\r\n                        <motion.div whileTap={{ scale: 0.95 }}>\r\n                          <ZoomOut\r\n                            onClick={() => {\r\n                              console.log('zoom refs ', zoomRefs[refIndex])\r\n                              zoomRefs[refIndex].zoomOut()\r\n                            }}\r\n                          />\r\n                        </motion.div>\r\n\r\n                        {isBrowserFullScreen ? (\r\n                          <motion.div whileTap={{ scale: 0.95 }}>\r\n                            <FullscreenExit\r\n                              onClick={() => {\r\n                                isBrowserFullScreen\r\n                                  ? exitFullScreen()\r\n                                  : fullScreen()\r\n                              }}\r\n                            />\r\n                          </motion.div>\r\n                        ) : (\r\n                          <motion.div whileTap={{ scale: 0.95 }}>\r\n                            <Fullscreen\r\n                              onClick={() => {\r\n                                isBrowserFullScreen\r\n                                  ? exitFullScreen()\r\n                                  : fullScreen()\r\n                              }}\r\n                            />\r\n                          </motion.div>\r\n                        )}\r\n\r\n                        <motion.div whileTap={{ scale: 0.95 }}>\r\n                          <GridFill\r\n                            onClick={() => {\r\n                              setShowThumbnails(!showThumbnails)\r\n                            }}\r\n                          />\r\n                        </motion.div>\r\n\r\n                        {isMobile ? null : (\r\n                          <motion.div whileTap={{ scale: 0.95 }}>\r\n                            <Search onClick={() => initMagnifyingGlass()} />\r\n                          </motion.div>\r\n                        )}\r\n\r\n                        <motion.div\r\n                          whileTap={{ scale: 0.95 }}\r\n                          className='slideshowPlayBtn'\r\n                        >\r\n                          {isSlideshowPlaying ? (\r\n                            <PauseCircleFill\r\n                              onClick={() => {\r\n                                isSlideshowPlaying\r\n                                  ? stopSlideshow()\r\n                                  : playSlideshow()\r\n                              }}\r\n                            />\r\n                          ) : (\r\n                            <PlayCircleFill\r\n                              onClick={() => {\r\n                                isSlideshowPlaying\r\n                                  ? stopSlideshow()\r\n                                  : playSlideshow()\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </motion.div>\r\n                      </div>\r\n                    )}\r\n\r\n                    <motion.div\r\n                      whileTap={{ scale: 0.95 }}\r\n                      className='closeIcon'\r\n                    >\r\n                      <XLg\r\n                        onClick={() => {\r\n                          closeModal()\r\n                        }}\r\n                      />\r\n                    </motion.div>\r\n                  </section>\r\n\r\n                  <div\r\n                    className={'next1 ' + arrowStyle + '_icon imageModal'}\r\n                    onClick={() => {\r\n                      setRefIndex(refIndex + 1);\r\n                      reactSwipeEl.next();\r\n                      setImgSlideIndex([imgSlideIndex + 1 , 1])\r\n\r\n                    }}\r\n                  >\r\n                    <span>&#10095;</span>\r\n                  </div>\r\n                  <div\r\n                    className={'prev1 ' + arrowStyle + '_icon imageModal'}\r\n                    onClick={() => {\r\n                      setRefIndex(refIndex - 1)\r\n                      reactSwipeEl.prev()\r\n                    }}\r\n                  >\r\n                    <span>&#10094;</span>\r\n                  </div>\r\n\r\n                  <AnimatePresence initial={false} custom={direction}>\r\n                    <ReactSwipe\r\n                      className={`slideshowInnerContainer  ${\r\n                        showThumbnails\r\n                          ? 'slideshowInnerContainerThumbnails'\r\n                          : ''\r\n                      } `}\r\n                      swipeOptions={reactSwipeOptions}\r\n                      ref={el => (reactSwipeEl = el)}\r\n                      childCount={images.length}\r\n                    >\r\n                      {paneNodes}\r\n                    </ReactSwipe>\r\n                  </AnimatePresence>\r\n\r\n                  <div\r\n                    className='thumbnailsOuterContainer imageModal'\r\n                    style={imagesLoaded ? {} : { display: 'displayHidden' }}\r\n                  >\r\n                    <ScrollContainer\r\n                      className='scroll-container'\r\n                      vertical={false}\r\n                      horizontal={true}\r\n                    >\r\n                      <AnimatePresence initial={animatedThumbnails}>\r\n                        {showThumbnails !== false && (\r\n                          <motion.div\r\n                            initial={'hidden'}\r\n                            exit={'hidden'}\r\n                            animate={'visible'}\r\n                            transition={{\r\n                              type: 'spring',\r\n                              duration: 0.75\r\n                            }}\r\n                            variants={thumbnailVariants}\r\n                            className='thumbnails flex justify-centre align-centre gap-2 md:gap-4 rounded-sm mx-auto'\r\n                          >\r\n                            {images.map((img, index) => (\r\n                              <img\r\n                                className={\r\n                                  'thumbnail ' +\r\n                                  (imageIndex === index ? 'active' : '')\r\n                                }\r\n                                src={img.src}\r\n                                style={\r\n                                  imageIndex === index\r\n                                    ? { border: activeThumbnailBorder }\r\n                                    : { border: thumbnailBorder }\r\n                                }\r\n                                onClick={() => {\r\n                                  setCurrentSlide(index)\r\n                                }}\r\n                                alt={img.caption}\r\n                                onLoad={() => setImagesLoaded(true)}\r\n                              />\r\n                              // <span style={{color: \"white\"}}>{index}</span>\r\n                            ))}\r\n                          </motion.div>\r\n                        )}\r\n                      </AnimatePresence>\r\n                    </ScrollContainer>\r\n                  </div>\r\n                </div>\r\n                {/* </React.Fragment> */}\r\n                {/* )} */}\r\n\r\n                {/* </TransformWrapper>      */}\r\n              </motion.div>\r\n            </Portal>\r\n          )}\r\n        </AnimatePresence>\r\n      </AnimateSharedLayout>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport styles from './styles.module.css'\r\nimport './css/tailwind.css';\r\nimport {VideoLightbox} from \"./VideoLightbox\";\r\nimport {AnimImage as Image} from \"./AnimImage\";\r\nimport {SlideshowLightbox} from \"./SlideshowLightbox\";\r\nimport axios from \"axios\";\r\n\r\nconst initLightboxJS = (licenseKey, plan_type) => {\r\n  console.log(\"init lightboxjs\")\r\n  var body = {\r\n    license_key: licenseKey,\r\n    plan_type: plan_type,\r\n  };\r\n\r\n  axios.post('https://lightboxjs-server.herokuapp.com/license', body)\r\n    .then(function (response) {\r\n      let licenseKeyValid = response.data.license_valid;\r\n\r\n      if (!licenseKeyValid) {\r\n        console.warn(\"Lightbox.js: Invalid license key specified, a valid license key must be provided.\")\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n\r\n};\r\n\r\nexport { VideoLightbox, Image, SlideshowLightbox, initLightboxJS }"],"names":["themes","day","background","iconColor","night","lightbox","VideoLightbox","props","useState","isOverlayDisplayed","setIsOverlayDisplayed","setIconColor","React","backgroundColor","setBackgroundColor","state","useRef","useEffect","theme","className","AnimateSharedLayout","type","AnimatePresence","motion","div","initial","opacity","exit","animate","key","style","position","top","left","width","height","zIndex","onClick","color","whileTap","scale","XLg","onAnimationComplete","setIsAnimating","onAnimationStart","video","layoutId","id","controls","src","videoSrc","poster","posterUrl","isBrowser","window","defaultMapInteractionValue","translation","x","y","AnimImage","isZoomed","setIsZoomed","zoomImg","setZoomImg","fullScreenImage","roundedImage","imgContainHeight","setImgContainHeight","imgContainWidth","setImgContainWidth","setImgLayoutID","imgAnimation","panImage","setPanImage","mapInteractionValue","setMapInteractionValue","isAnimating","imgElem","changeCursor","cursor_name","current","parentElement","cursor","imageUrl","img","image","Image","onload","contain","screen","naturalWidth","naturalHeight","onerror","err","console","error","reducedMotionMediaQuery","checkAndInitReducedMotion","removeEventListener","initSmoothZoom","transition","zoomIn","zoomOut","resetMapInteractionValue","matchMedia","matches","addEventListener","title","Portal","event","e","modals","document","getElementsByClassName","arr_modals","Array","from","i","length","contains","target","checkModalClick","ZoomIn","ZoomOut","MapInteractionCSS","maxScale","minScale","disablePan","value","onChange","reinitZoomSettings","setTimeout","mapInteractionChange","ref","defaultPrevented","thumbnailVariants","visible","hidden","thumbnailBorder","animTransitionDefault","stiffness","damping","duration","slideshowAnimTransition","SlideshowLightbox","rangeSize","imgSlideIndex","direction","setImgSlideIndex","showModal","setShowModal","isSlideshowPlaying","setIsSlideshowPlaying","children","map","obj","images","setImages","imageIndex","continuous","startSlide","reactSwipeOptions","setReactSwipeOptions","slideshowInterval","roundedImages","setRoundedImages","showControls","setShowControls","lightboxIdentifier","imageFullScreen","fullScreen","setLockAxisY","licenseKey","setAnimTransition","setWidth","setImgSwipeMotion","isBrowserFullScreen","setIsBrowserFullScreen","enableMagnifyingGlass","setMagnifyingGlass","imagesLoaded","setImagesLoaded","refIndex","setRefIndex","isInit","setIsInit","setUsesDataAttr","zoomRef","setZoomBtnRef","zoomRefs","initZoomRef2","push","setThumbnailBorder","showThumbnails","setShowThumbnails","animatedThumbnails","animateThumbnails","setImgAnimation","arrowStyle","isMobile","keyPressHandler","updateCurrentSlide","closeModal","handleWindowResize","innerWidth","callback","timeDelay","savedCallbackRef","reactSwipeEl","exitFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","closeFullScreen","removeFullScreenChangeEventListeners","newDirection","resetSlideAnim","resetMapInteraction","updateImageSlideshow","openModal","num","paneNodes","apply","_","index","React.createElement","Magnifier","mgShowOverflow","TransformWrapper","onWheel","wheelEvent","onZoom","zoomEvent","centerZoomedOut","initialScale","TransformComponent","wrapperStyle","marginLeft","marginRight","contentStyle","log","intervalID","setInterval","clearInterval","undefined","img_gallery","querySelectorAll","img_elements","usesAttr","getAttribute","reactSwipeOptionConfig","classList","add","alt","filter","elem","class","FullscreenExit","Fullscreen","lightbox_elem","getElementById","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","GridFill","Search","imageContainerH","imageContainerW","initImageDimensions","PauseCircleFill","PlayCircleFill","next","prev","custom","ReactSwipe","swipeOptions","el","childCount","display","ScrollContainer","vertical","horizontal","variants","border","newIndex","slide","caption","onLoad","initLightboxJS","plan_type","axios","post","license_key","then","response","data","license_valid","warn"],"mappings":"yrBAIA,IAAMA,EAAS,CACbC,IAAK,CAAEC,WAAY,QAASC,UAAW,SACvCC,MAAO,CAAEF,WAAY,UAAWC,UAAW,UAC3CE,SAAU,CAAEH,WAAY,qBAAsBC,UAAW,WAK9CG,EAAgB,SAACC,GAC5B,MAAoDC,GAAS,GAAtDC,OAAoBC,SACOF,EAChCD,EAAMJ,UAAYI,EAAMJ,UAAYH,EAAM,SAAeG,WADpDA,OAAWQ,SAI4BC,EAAMJ,SAClDD,EAAMM,gBAAkBN,EAAMM,gBAAkBb,EAAM,UADjDa,OAAiBC,OAGjBC,EAAmBH,EAAMJ,cAYhC,OAXgBQ,EAAO,MAEvBJ,EAAMK,UAAU,WACVV,EAAMW,OACJlB,EAAOO,EAAMW,SACfJ,EAAmBd,EAAOO,EAAMW,OAAOhB,YACvCS,EAAaX,EAAOO,EAAMW,OAAOf,aAGpC,CAACY,IAGFH,uBAAKO,UAAU,cACbP,gBAACQ,GAAoBC,KAAK,aACxBT,gBAACU,QACyB,IAAvBb,GACCG,gBAACW,EAAOC,KACNC,QAAS,CAAEC,QAAS,GACpBC,KAAM,CAAED,QAAS,GACjBE,QAAS,CAAEF,QAAS,GACpBG,IAAI,eACJC,MAAO,CACLC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNpB,gBAAiBA,EACjBqB,MAAO,QACPC,OAAQ,QACRC,OAAQ,QAEVjB,mCACAkB,QAAS,kBAAM3B,GAAsB,KAErCE,uBAAKO,UAAU,qBACbP,2BACEO,UAAU,yBACVW,MAAO,CAAEQ,MAAOnC,IAGhBS,gBAACW,EAAOC,KAAIe,SAAU,CAACC,MAAO,KAAOrB,UAAU,aAE7CP,gBAAC6B,GAAIJ,QAAS,WAAO3B,GAAsB,QAK/CE,gBAACW,EAAOC,KACNL,UAAU,qCACVU,IAAK,QACLa,oBAAqB,WACnBC,gBAAe,IAEjBC,iBAAkB,WAChBD,gBAAe,KAGjB/B,gBAACW,EAAOsB,OAENC,SAAU,aAAevC,EAAMwC,GAE/B5B,kCACAU,IAAKtB,EAAMwC,GACXC,aAEApC,0BAAQqC,IAAK1C,EAAM2C,SAAU7B,KAAK,kBAS5CT,gBAACW,EAAOsB,OAENR,QAAS,kBAAM3B,EAAsBH,EAAMwC,KAC3CD,SAAU,aAAevC,EAAMwC,GAC/B5B,2BACAU,IAAKtB,EAAMwC,GACXb,MAAO,IACPc,UAAU,EACVG,OAAQ5C,EAAM6C,WAEdxC,0BAAQqC,IAAK1C,EAAM2C,SAAU7B,KAAK,sOCzCjCgC,EAAY,iBAAwB,oBAAXC,uBCtDhCtD,EAAS,CAACC,IAAO,CAACC,WAAY,QAASC,UAAW,SAAUC,MAAS,CAACF,WAAY,UAAWC,UAAW,UAC9FE,SAAY,CAACH,WAAY,qBAAsBC,UAAW,WAKpEoD,EAA6B,CAACf,MAAO,EAAGgB,YAAa,CAAEC,EAAG,EAAGC,EAAG,IAEzDC,EAAY,gBAAepD,4IACcC,GAAS,GAAtDC,OAAoBC,SACKF,GAAS,GAAlCoD,OAAUC,SACarD,EAAS,GAAhCsD,OAASC,UACkCvD,IAASD,EAAMyD,iBAAkBzD,EAAMyD,iBACjDxD,GAASD,EAAM0D,cAAe1D,EAAM0D,cAE5BzD,EAAS,MAAlD0D,OAAkBC,SACqB3D,EAAS,KAAhD4D,OAAiBC,OACJC,EAAkB9D,EAASD,EAAMgE,aAAehE,EAAMgE,aAAe,mBAC3C/D,EAASD,EAAMM,gBAAkBN,EAAMM,gBAAkBb,EAAM,SAAeE,YAArHW,OAAiBC,SACUN,EAASD,EAAMJ,UAAYI,EAAMJ,UAAYH,EAAM,SAAeG,WAA7FA,OAAWQ,OACXI,EAAmBH,EAAMJ,gBACAA,GAAS,GAAlCgE,OAAUC,SACqCjE,EAAS+C,GAAxDmB,OAAqBC,SACUnE,GAAS,GAAxCoE,OAAajC,OACdkC,EAAU7D,EAAO,MAEjB8D,EAAe,SAACC,GACJF,EAAQG,QAAQC,cAAcA,cACpCnD,MAAMoD,UAAYH,GAyC9B9D,EAAU,WAdQ,IAACkE,EACXC,EADWD,EAgBP5E,EAAM8E,MAAMpC,KAfhBmC,EAAM,IAAIE,OACZrC,IAAMkC,EAEVC,EAAIG,OAAS,WACX,MAA8BC,EAAuB,IAAfC,OAAOvD,MAA8B,GAAhBuD,OAAOtD,OAAciD,EAAIM,aAAcN,EAAIO,eAAhGzD,IAAAA,MACNiC,IADahC,QAEbkC,EAAmBnC,IAErBkD,EAAIQ,QAAU,SAACC,GACbC,QAAQC,MAAMF,IAQVtF,EAAMW,OACJlB,EAAOO,EAAMW,SACfJ,EAAmBd,EAAOO,EAAMW,OAAOhB,YACvCS,EAAaX,EAAOO,EAAMW,OAAOf,YAKrC,IAAI6F,EAA0BC,KAE9B,kBACED,EAAwBE,oBAAoB,SAAUF,KAIzD,CAACjF,IAGJ,IAAMoF,EAAiB,WACLtB,EAAQG,QAAQC,cACtBnD,MAAMsE,WAAa,kBAezBC,GAAS,WACbvB,EAAa,YACbjB,GAAY,GACZE,EAAWD,EAAU,IAGjBwC,GAAU,WACdxB,EAAa,WACbjB,GAAY,GACZE,EAAWD,EAAU,IASjByC,GAA2B,WAC/B5B,EAAuB,CAACnC,MAAO,EAAGgB,YAAa,CAAEC,EAAG,EAAGC,EAAG,MA+BtDuC,GAA4B,WAChC,IAAID,EAWJ,OAVI3C,KACF2C,EAA0B1C,OAAOkD,WAAW,uCAEZR,EAAwBS,SACtDnC,EAAe,MAGjB0B,EAAwBU,iBAAiB,cAA2BV,EAjBvDS,SACbnC,EAAe,SAmBV0B,GAsBP,OACEpF,uBAAKO,UAAU,cACbP,gBAACU,OAECV,gBAACW,EAAO6D,SACF7E,GACJ0C,IAAK1C,EAAM8E,MAAMpC,IACjBZ,QAAS,kBAAM3B,EAAsBH,EAAM8E,MAAMsB,QAEjDpE,SAAU,CAACC,MAAO,KAClBV,MAAOvB,EAAMuB,MACbX,UAAU,iBACVU,IAAKtB,EAAM8E,MAAMsB,SAGrB/F,gBAACgG,OACChG,gBAACU,QAEyB,IAAvBb,GAECG,gBAACW,EAAOC,KACNC,QAAS,CAAEC,QAAS,GACpBC,KAAM,CAAED,QAAS,GACjBE,QAAS,CAAEF,QAAS,GACpBG,IAAI,aACJC,MAAO,CACLC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNpB,gBAAiBA,EACjBqB,MAAO,QACPC,OAAQ,QACRC,OAAQ,QAEVjB,iDACAkB,QAAS,SAACwE,UApMA,SAACC,GAKvB,IAHA,IAAMC,EAASC,SAASC,uBAAuB,cAC3CC,EAAaC,MAAMC,KAAKL,GAEnBM,EAAG,EAAGA,EAAIH,EAAWI,OAAQD,IAIpC,GAHWH,EAAWG,GACCE,SAAST,EAAEU,QAG/B,OAIL9G,GAAsB,GAsLU+G,CAAgBZ,KAEpCjG,gBAACW,EAAOC,KAAIL,UAAU,qBACpBP,2BAASO,UAAU,yBAAyBW,MAAO,CAACQ,MAAOnC,IAE3DS,gBAACW,EAAOC,KAAIe,SAAU,CAACC,MAAO,MACpB5B,gBAAC8G,GAAOrF,QAAS,kBAAMgE,SAG/BzF,gBAACW,EAAOC,KAAIe,SAAU,CAACC,MAAO,MACtB5B,gBAAC+G,GAAQtF,QAAS,kBAAMiE,SAIhC1F,gBAACW,EAAOC,KAAIe,SAAU,CAACC,MAAO,KAAOrB,UAAU,aAE7CP,gBAAC6B,GAAIJ,QAAS,WA1HhCkE,KAEA7F,GAAsB,QA4HRE,gBAACW,EAAOC,KAAIL,UAAU,kCAEnBP,gBAACgH,GAAkBC,SArPvB,IAqP2CC,SApP3C,EAoP+DC,WAAYvD,EAAUwD,MAAOtD,EACzFuD,SAAU,SAACD,IA7EA,SAACA,GAC5BvD,GAAY,GA5Ca,SAACuD,GAGtBA,EAAMxF,MAAQkC,EAAoBlC,OACpCqB,GAAY,GACZsC,KAGO6B,EAAMxF,MAAQkC,EAAoBlC,OACzCqB,GAAY,GACZsC,KA3CctB,EAAQG,QAAQC,cACtBnD,MAAMsE,WAAa,GA8E7B8B,CAAmBF,GAEnBrD,EAAuBqD,GAEnBA,EAAMxF,OAASe,EAA2Bf,OAC5CiC,GAAY,GACZ8B,KAhFF4B,WAAW,WACThC,KACC,MAmFM6B,EAAMxF,MAAQe,EAA2Bf,QAAUoC,GAC1DE,EAAa,cA8DuBsD,CAAqBJ,IAAS3B,OAAQvC,GACxDlD,gBAACW,EAAO6D,KACNnC,IAAK1C,EAAM8E,MAAMpC,IACjBpB,IAAK,QAKLa,oBAAqB,WAAOC,GAAe,IAC3CC,iBAAkB,WAAOD,GAAe,IACxCxB,UAAU,SACVW,MAAO,CAACI,MAAOkC,EAAiBjC,OAAQ+B,GACxCmE,IAAKxD,EACLxC,QAAS,SAACyE,GACHA,EAAEwB,mBACA1E,GAAagB,EAIlB0B,KAHED,kBC9M5BkC,EAAoB,CACtBC,QAAS,CAAE9G,QAAS,EAAGgC,EAAG,GAC1B+E,OAAQ,CAAE/G,QAAS,EAAGgC,EAAG,MAGrBH,EAA6B,CAAEf,MAAO,EAAGgB,YAAa,CAAEC,EAAG,EAAGC,EAAG,IACjE1D,EAAS,CACbC,IAAK,CACHC,WAAY,QACZC,UAAW,QACXuI,gBAAiB,yBAEnBtI,MAAO,CACLF,WAAY,UACZC,UAAW,SACXuI,gBAAiB,gCAEnBrI,SAAU,CACRH,WAAY,yBACZC,UAAW,SACXuI,gBAAiB,iCAgBfC,EAAwB,CAC5BlF,EAAG,CAAEpC,KAAM,SAAUuH,UAAW,IAAKC,QAAS,IAC9CnH,QAAS,CAAEoH,SARW,KAUlBC,EAA0B,CAC9BrH,QAAS,CAAEoH,SAXW,KAcXE,EAAoB,SAACzI,GAEhC,IFjHQ0I,IEiH+CzI,EAAS,CAAC,EAAG,WAA5D0I,OAAeC,OAAYC,SACD5I,GAAS,GAApC6I,OAAWC,SACkC9I,GAAS,GAAtD+I,OAAoBC,SAGChJ,EAC1BD,EAAMkJ,SAAWlJ,EAAMkJ,SAASC,IAAI,SAACC,UAAQA,EAAIpJ,QAAS,IADrDqJ,OAAQC,OAGTC,IAAwCZ,EAAlB,IFzHpBD,EEyHuBW,EAAOtC,OAAV,GFxHc2B,GAAaA,EEwH3B,IACsBzI,EAAW,CAAEuJ,YAAY,EAAMC,WAAY,IAAtFC,OAAmBC,OAEnBC,EAA2C3J,EAChDD,EAAM4J,kBAAoB5J,EAAM4J,kBAAoB,WAEZ3J,GACxCD,EAAM6J,eAAgB7J,EAAM6J,eADvBA,OAAeC,UAGkB7J,GACtCD,EAAM+J,cAAe/J,EAAM+J,cADtBA,SAAcC,SAGdC,GAA6ChK,IAClDD,EAAMiK,oBAAqBjK,EAAMiK,uBAE5BC,GAAuCjK,IAC5CD,EAAMmK,YAAanK,EAAMmK,eAKTC,IAHkBnK,EAClCD,EAAMqK,WAAarK,EAAMqK,WAAa,IAENpK,GAAS,OAE1BqD,GAAerD,GAAS,MAClBqK,GAAqBrK,EAASmI,MACpClE,GAAejE,GAAS,UACXA,EAAS,GACbA,EAAS,IAA5B0B,SAAO4I,SACcnG,GAA0BnE,EACpD+C,MAEqBwH,GAAqBvK,EApDpB,YAqDcA,GAAS,GACOA,GAAS,IAAxDwK,SAAqBC,YACwBzK,GAAS,GAAtD0K,SAAuBC,YACU3K,GAAS,GAA1C4K,SAAcC,YACW7K,EAAS,GAAlC8K,SAAUC,YAE+B/K,EAAS,KAAlD0D,SAAkBC,YACqB3D,EAAS,KAAhD4D,SAAiBC,YACI7D,GAAS,GAA9BgL,SAAQC,SAGMC,IAFWlL,GAAS,GAEDA,GAAS,OAU3CmL,IAP4BnL,GAAS,GACfA,GAAS,GACDA,GAAS,GAK7BQ,EAAO,OACJ4K,GAAiBpL,EAAS,SACtCqL,GAAyBrL,EAAS,OAYnCsL,IAVgCtL,EAAS,MAU1B,SAAC6H,GAEhBA,GACFwD,GAASE,KAAK1D,QAQ4B7H,EAC5CD,EAAMM,gBACFN,EAAMM,gBACNb,EAAM,MAAeE,YAHpBW,SAAiBC,YAKUN,EAChCD,EAAMJ,UAAYI,EAAMJ,UAAYH,EAAM,MAAeG,WADpDA,SAAWQ,YAG4BH,EAC5CD,EAAMmI,gBACFnI,EAAMmI,gBACN1I,EAAM,MAAe0I,iBAHpBA,SAAiBsD,YAMoBxL,IAC1CD,EAAM0L,gBAAiB1L,EAAM0L,gBADxBA,SAAgBC,SAGhBC,GAA6C3L,GAClDD,EAAM6L,mBAAoB7L,EAAM6L,sBAEbC,GAAmB7L,EACtCD,EAAMgE,aAAehE,EAAMgE,aAAe,cAGrC+H,GAA6B9L,EAClCD,EAAM+L,WAAa/L,EAAM+L,WAAa,WAGlCC,GAAWrK,IA7HC,IA+HZsK,GAAkB,SAAC3F,GACvB,IAAIhF,EAAMgF,EAAMhF,IAEL,aAAPA,EACF4K,IAAoB,GACJ,cAAP5K,EACT4K,GAAmB,GACH,UAAP5K,GAAoBmJ,IAC7B0B,MAIJ,SAASC,KACP7B,GAASxH,OAAOsJ,YAmBlB,IFjQ0BC,GAAUC,GAC1BC,GEmzBNC,GA5iBEC,GAAiB,WACjBjC,KFpOuB,SAAChE,GAC1BA,EAASkG,eACXlG,EAASkG,iBAIFlG,EAASmG,qBAChBnG,EAASmG,uBAIFnG,EAASoG,kBAChBpG,EAASoG,mBEyNPC,CAAgBrG,UAChBiE,IAAuB,GACvBqC,OAIEb,GAAqB,SAACc,GAC1BC,KACArC,IAAmB,GACnBsC,KACArE,EAAiB,CAACF,EAAgBqE,EAAcA,IAC5ChB,IACFX,GAAcD,KAIZ+B,GAAuB,SAACH,GAC5BE,KACArE,EAAiB,CAACF,EAAgBqE,EAAcA,KAG5CC,GAAiB,WACrB3C,GAAkBlC,IAGd8E,GAAsB,WAC1BhJ,IAAY,GACZE,GAAuB,CAAEnC,MAAO,EAAGgB,YAAa,CAAEC,EAAG,EAAGC,EAAG,KAC3DG,IAAY,IAiBR6I,GAAa,WACb1B,IACFiC,KAIE1D,GACFC,GAAsB,GAGxBiE,KACA5J,IAAY,GACZyF,GAAa,IAGTqE,GAAY,SAACC,GACjBxE,EAAiB,CAACwE,EAAK,IACvBtE,GAAa,IA6HTuE,GAAY1G,MAAM2G,MAAM,KAAM3G,MAAMyC,EAAOtC,SAASoC,IAAI,SAACqE,EAAGC,GAChE,OACEC,SAAKpM,IAAKmM,GACkB,GAAzB9C,GACC+C,EAACC,GACCjL,IAAK2G,EAAOoE,GAAO/K,IACnB9B,UAAU,yCACVgB,OAAQ+B,GACRhC,MAAOkC,GACP+J,gBAAgB,EAChBrM,MAAO,CACLI,MAAOkC,GACPjC,OAAQ+B,MAIZ+J,aACEA,EAACG,GACC/F,IAAKyD,GACLuC,QAAS,CAAEC,WAAAA,IACXC,OAAQC,GACRC,iBAAiB,EACjBC,aAAc,GAEdT,EAACU,GACCC,aAAc,CAAEC,WAAY,OAAQC,YAAa,QACjDC,aAEM,CACE7M,MAAO,QACPC,OAAQ,QACR0M,WAAY,OACZC,YAAa,QASrBjN,IAAKmM,GAELC,SACE9M,sBACEsJ,GAAkB,GAAK,kCACVL,EAAgB,aAAe,IAC9CnH,IAAK2G,EAAOoE,GAAO/K,IACnBF,GAAG,cAmEbyL,GAAY,SAACnG,EAAKvB,GACtBhB,QAAQkJ,IAAI,cAAe3G,GAEJ,GAAnBA,EAAItH,MAAMyB,QACZ6J,GAAgB,WAChBtB,GA7doB,KA8dpBjF,QAAQkJ,IAAI,sBAMVV,GAAa,SAACjG,EAAKvB,GACvBhB,QAAQkJ,IAAI,eAAgB3G,GAC5BgE,GAAgB,QAEhB1B,IAAa,IAiCT2C,GAAuC,WAC3CtG,SAASd,oBAAoB,mBAAoB+G,IACjDjG,SAASd,oBAAoB,yBAA0B+G,IACvDjG,SAASd,oBAAoB,qBAAsB+G,IACnDjG,SAASd,oBAAoB,sBAAuB+G,KAwMtD,OFrzB0BJ,GEmrBxB,WACEa,GAAqB,IFprBWZ,GEsrBlCvD,EAAqBY,EAAoB,KFrrBjC4C,GAAmB/L,IAEzBC,EAAU,WACR8L,GAAiB/H,QAAU6H,IAC1B,CAACA,KAEJ5L,EAAU,WAIR,GAAkB,OAAd6L,GAAoB,CAEtB,IAAImC,EAAaC,YALnB,WACEnC,GAAiB/H,WAIkB8H,IAGnC,yBAAaqC,cAAcF,MAE5B,CAACnC,KEuqBR7L,EAAU,WACR6E,QAAQkJ,IAAI,aAAczO,EAAMmK,YAtBN0E,MAAtB7O,EAAM+J,cACRC,GAAgBhK,EAAM+J,cAGpBjH,GACFyH,GAASxH,OAAOsJ,YAGdtJ,OAAOsJ,YA1kBK,KA2kBdP,GAAgB,QA5DlBrF,SAASN,iBAAiB,UAAW8F,IAEjCnJ,GACFC,OAAOoD,iBAAiB,SAAUiG,IA4EpC,IAAI3G,EAlD4B,WAChC,IAAIA,EAA0B,GAiB9B,OAfI3C,KACF2C,EAA0B1C,OAAOkD,WAC/B,uCAG8BR,EAAwBS,SACtD4F,GAAgB,QAGlBrG,EAAwBU,iBACtB,cACiBV,EAtBNS,SACb4F,GAAgB,WAyBXrG,EAgCuBC,GAE9B,IAAKuF,GAAQ,CACX,GAAIhB,GAAoB,CACtB,IAAI6E,EAAcrI,SAASsI,iBAAiB,qBACxCC,EAAe,GAEfC,GAAW,EACf,GAAIH,EAAY/H,OAAS,EAAG,CAC1B,mBAASD,GACP,IAAIjC,EAAMiK,EAAYhI,GAEPjC,EAAIqK,aAAa,oBAChBjF,KACdpF,EAAIsB,iBACF,QACA,WACE,IAAIgJ,EAAyBzF,EAC7ByF,EAAuB1F,WAAa3C,EACpC6C,EAAqBwF,GACrB/B,GAAUtG,KAEZ,GAEFjC,EAAIuK,UAAUC,IAAI,kBAClBJ,GAAW,EACXD,EAAaxD,KAAK,CAAE9I,IAAKmC,EAAInC,IAAK4M,IAAKzK,EAAIyK,QAjBtCxI,EAAI,EAAGA,GAAKgI,EAAY/H,OAAS,EAAGD,MAApCA,GAqBLmI,GACF9D,IAAgB,GAGlB7B,EAAU0F,SAGRhP,EAAMkJ,UACRI,EACEtJ,EAAMkJ,SACHqG,OAAO,SAACC,SAAsB,OAAbA,EAAK1O,OACtBqI,IAAI,SAACC,UAAQA,EAAIpJ,SAK1BkL,IAAU,GAIZ,OA7TIlL,EAAMW,OACJlB,EAAOO,EAAMW,SACfJ,GAAmBd,EAAOO,EAAMW,OAAOhB,YACvCS,GAAaX,EAAOO,EAAMW,OAAOf,WACjC6L,GAAmBhM,EAAOO,EAAMW,OAAOwH,kBAIvCnI,EAAMmK,YACgB,GAApBnK,EAAMmK,aACR2B,GAAgB,QAChBhC,GAAiB,eAyLjBhH,IACFC,OAAO4C,oBAAoB,SAAUyG,IACrC3F,SAASd,oBAAoB,UAAWsG,KAyHxCxG,EAAwBE,oBACtB,SACAF,KAGH,CAACwG,KA6DFyB,SAAK+B,MAAUzP,EAAMY,yBACI,GAAtBqJ,GAA8BjK,EAAMkJ,SAAW,KAErB,GAAtBe,GACG,KACAjK,EAAMkJ,SACHqG,OAAO,SAACC,SAAsB,OAAbA,EAAK1O,OACtBqI,IAAI,SAACqG,EAAM/B,UACVC,aACM8B,EAAKxP,OACTyP,MAAOD,EAAKxP,MAAMY,UAAY,kBAC9BkB,QAAS,WACPyD,QAAQkJ,IAAI,OACZ,IAAIU,EAAyBzF,EAC7ByF,EAAuB1F,WAAagE,EACpC9D,EAAqBwF,GACrB/B,MAEF9L,IAAKmM,EACLzL,SAAU,CAAEC,MAAO,UAGjCyL,EAAC7M,GAAoBC,KAAK,aACxB4M,EAAC3M,GAAgBG,SAAS,IAGT,IAAd4H,GACC4E,EAACrH,OACCqH,EAAC1M,EAAOC,KACNL,UAAU,yBACVU,IAAI,yBACJkB,GAAG,gBAGHtB,QAAS,CAAEC,QAAS,EAAGc,MAAO,KAC9Bb,KAAM,CAAED,QAAS,EAAGc,MAAO,KAC3BZ,QAAS,CAAEF,QAAS,EAAGc,MAAO,GAC9B4D,WAAY,CACV0C,SAAU,KAcZmF,SACE9M,8BACAW,MAAO,CACLjB,gBAAiBA,KAGnBoN,aACE9M,UACE,0BAA4BmL,GAAa,eAE3CxK,MAAO,CAAEQ,MAAOnC,KAKfmK,IACC2D,SAAK9M,UAAU,YACb8M,EAAC1M,EAAOC,KAAIe,SAAU,CAAEC,MAAO,MAC7ByL,EAACvG,GACCrF,QAAS,WACPyD,QAAQkJ,IAAI,YAAanD,GAASP,KAClCO,GAASP,IAAUjF,aAKzB4H,EAAC1M,EAAOC,KAAIe,SAAU,CAAEC,MAAO,MAC7ByL,EAACtG,GACCtF,QAAS,WACPyD,QAAQkJ,IAAI,aAAcnD,GAASP,KACnCO,GAASP,IAAUhF,cAMvB2H,EAAC1M,EAAOC,KAAIe,SAAU,CAAEC,MAAO,MAC7ByL,EAFHjD,GAEIiF,EAUAC,GATC7N,QAAS,WA/oBlB,IF5OU8N,EE43BCnF,GACIiC,OF73BLkD,EE6OZnJ,SAASoJ,eAAe,kBF5OvBC,kBAChBF,EAAcE,oBAIPF,EAAcG,wBACrBH,EAAcG,0BAIPH,EAAcI,qBACrBJ,EAAcI,sBEmOdtF,IAAuB,GA+VvBjE,SAASN,iBAAiB,mBAAoBuG,IAC9CjG,SAASN,iBAAiB,yBAA0BuG,IACpDjG,SAASN,iBAAiB,qBAAsBuG,IAChDjG,SAASN,iBAAiB,sBAAuBuG,SA6T7BgB,EAAC1M,EAAOC,KAAIe,SAAU,CAAEC,MAAO,MAC7ByL,EAACuC,GACCnO,QAAS,WACP6J,IAAmBD,QAKxBM,GAAW,KACV0B,EAAC1M,EAAOC,KAAIe,SAAU,CAAEC,MAAO,MAC7ByL,EAACwC,GAAOpO,QAAS,kBA7apC6I,GAGHmB,GAAgB,WAKQ,WAC1BvG,QAAQkJ,IAAI,wBACZ,IACI0B,EAAiBC,EADjBvL,EAAM4B,SAASoJ,eAAe,OAE9B7D,IACFoE,EAAkB,IAIhBD,EADEtL,EAAIM,aAAeN,EAAIO,cACP,IAIA,MAKpBgL,EAAkB,IAClBD,EAAkB,KAGpB,MAA8BlL,EAC5BC,OAAOvD,MAAQyO,EACflL,OAAOtD,OAASuO,EAChBtL,EAAIM,aACJN,EAAIO,eAJAzD,IAAAA,MAAOC,IAAAA,OAOb2D,QAAQkJ,IAAI,SAAU9M,GACtB4D,QAAQkJ,IAAI,UAAW7M,GACvBgC,GAAoBhC,GACpBkC,GAAmBnC,GAvCjB0O,QAIFzF,IAAoBD,QA4aA+C,EAAC1M,EAAOC,KACNe,SAAU,CAAEC,MAAO,KACnBrB,UAAU,oBAGR8M,EADD1E,EACEsH,EAQAC,GAPCzO,QAAS,WACPkH,GA3lB5BsB,GAAkBlC,GAClBa,GAAsB,KARtB2B,IAAmB,GACnBN,GAAkB9B,GAClB2E,GAAqB,GACrBlE,GAAsB,SAinBNyE,EAAC1M,EAAOC,KACNe,SAAU,CAAEC,MAAO,KACnBrB,UAAU,aAEV8M,EAACxL,GACCJ,QAAS,WACPqK,UAMRuB,SACE9M,UAAW,SAAWmL,GAAa,mBACnCjK,QAAS,WACPkJ,GAAYD,GAAW,GACvB0B,GAAa+D,OACb3H,EAAiB,CAACF,EAAgB,EAAI,MAIxC+E,oBAEFA,SACE9M,UAAW,SAAWmL,GAAa,mBACnCjK,QAAS,WACPkJ,GAAYD,GAAW,GACvB0B,GAAagE,SAGf/C,oBAGFA,EAAC3M,GAAgBG,SAAS,EAAOwP,OAAQ9H,GACvC8E,EAACiD,GACC/P,uCACE8K,GACI,oCACA,QAENkF,aAAclH,EACd5B,IAAK,SAAA+I,UAAOpE,GAAeoE,GAC3BC,WAAYzH,EAAOtC,QAElBuG,KAILI,SACE9M,UAAU,sCACVW,MAAOsJ,GAAe,GAAK,CAAEkG,QAAS,kBAEtCrD,EAACsD,GACCpQ,UAAU,mBACVqQ,UAAU,EACVC,YAAY,GAEZxD,EAAC3M,GAAgBG,QAAS0K,KACJ,IAAnBF,IACCgC,EAAC1M,EAAOC,KACNC,QAAS,SACTE,KAAM,SACNC,QAAS,UACTwE,WAAY,CACV/E,KAAM,SACNyH,SAAU,KAEZ4I,SAAUnJ,EACVpH,UAAU,iFAETyI,EAAOF,IAAI,SAACtE,EAAK4I,UAChBC,SACE9M,UACE,cACC2I,IAAekE,EAAQ,SAAW,IAErC/K,IAAKmC,EAAInC,IACTnB,MACEgI,IAAekE,EACX,CAAE2D,OAn8BV,sCAo8BQ,CAAEA,OAAQjJ,IAEhBrG,QAAS,WAnvBf,IAACuP,EACnBrE,EAEFA,GAHqBqE,EAovBuB5D,GAlvB/B9E,EACE,GAEC,EAGlB2B,GAAkB9B,GAClB0E,KACArE,EAAiB,CAACwI,EAAUrE,IAC5BP,GAAa6E,MAAMD,EAAU,MA2uBD/B,IAAKzK,EAAI0M,QACTC,OAAQ,kBAAM1G,IAAgB,mBC/hCxD2G,EAAiB,SAACpH,EAAYqH,GAClCnM,QAAQkJ,IAAI,mBAMZkD,EAAMC,KAAK,kDALA,CACTC,YAAaxH,EACbqH,UAAWA,IAIVI,KAAK,SAAUC,GACQA,EAASC,KAAKC,eAGlC1M,QAAQ2M,KAAK,6FAGV,SAAU1M,GACfD,QAAQkJ,IAAIjJ"}