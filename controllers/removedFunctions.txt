// register artefact function for route: '/add-artefact'
const addArtefact = async (req, res) => {
  // upload image to Cloudinary
  const image_data = await cloudinary.uploader.upload(
    req.body.record.artefactImg,
    {
      upload_preset: "sterling_family_account",
      allowed_formats: ["jpeg", "jpg", "png"],
      format: "jpg",
    }
  );

  // create a new 'Artefact' record
  const artefact = new Artefact({
    artefactName: req.body.record.artefactName,
    description: req.body.record.description,
    memories: req.body.record.memories,
    associated: null,
    category: null,
    location: req.body.record.location,
    "artefactImg.imgURL": image_data.url,
    "artefactImg.publicID": image_data.public_id,
  });

  // store artefact in database
  artefact
    .save()
    .then((result1) => {
      // checks if category exists in database
      Category.findOne({ category_name: req.body.record.category })
        .then((result2) => {
          if (result2) {
            // stores the existing category object in the artefact record
            Artefact.updateOne(
              { _id: result1._id },
              {
                $set: { category: result2 },
              },
              function (err, doc) {
                if (err) {
                  res.status(500).send({
                    message: "Error upon registering artefact",
                    err,
                  });
                } else {
                }
              }
            );
          } else {
            // creates a new Category record
            const newCategory = new Category({
              category_name: req.body.record.category,
            });

            // updates category of artefact
            Artefact.updateOne(
              { _id: result1._id },
              {
                $set: { category: newCategory },
              },
              function (err, doc) {
                if (err) {
                  res.status(500).send({
                    message: "Error upon registering artefact",
                    err,
                  });
                } else {
                }
              }
            );

            // stores new category in database
            newCategory.save();
          }
        })
        .catch((error) => {
          res.status(500).send({
            message: "Error upon registering artefact",
            err,
          });
        });

      // checks if associated exists on database
      Associated.findOne({ person: req.body.record.associated })
        .then((result3) => {
          if (result3) {
            // stores the existing associated object in the artefact record
            Artefact.updateOne(
              { _id: result1._id },
              {
                $set: { associated: result3 },
              },
              function (err, doc) {
                if (err) {
                  res.status(500).send({
                    message: "Error upon registering artefact",
                    err,
                  });
                } else {
                }
              }
            );
          } else {
            // create a new Associated record
            const newAssociated = new Associated({
              person: req.body.record.associated,
            });

            // updates associated of artefact
            Artefact.updateOne(
              { _id: result1._id },
              {
                $set: { associated: newAssociated },
              },
              function (err, doc) {
                if (err) {
                  res.status(500).send({
                    message: "Error upon registering artefact",
                    err,
                  });
                } else {
                }
              }
            );

            // stores new associated in database
            newAssociated.save();
          }
        })
        .catch((error) => {
          res.status(500).send({
            message: "Error upon registering artefact",
            err,
          });
        });

      res.status(200).send({
        message: "Artefact registered successfully",
        result1,
      });
    })
    .catch((error) => {
      res.status(500).send({
        message: "Error upon registering artefact",
        error,
      });
    });
};

// register new users
// (HELPER FUNCTION, WILL BE REMOVED)
const registerUser = async (req, res) => {
    const user = new User(req.body);
    await user
      .save()
      .then((result) => {
        res.status(200).send({
          message: "User Created Successfully",
          result,
        });
      })
      .catch((error) => {
        res.status(500).send({
          message: "Error upon creating user",
          error,
        });
      });
  
    console.log(user);
  };

  // change password function for route: '/change-password'
const changePassword = async (req, res) => {
    // hash the password using bcrypt before saving to mongodb
    const hashed_pass = await bcrypt.hash(req.body.password, SALT_FACTOR);
  
    // updates the password (hashed) of the user
    User.findOneAndUpdate(
      { username: req.body.username },
      { password: hashed_pass },
      function (err, doc) {
        if (err) {
          res.status(500).send({
            message: "Error upon changing password",
            err,
          });
        } else {
          res.status(200).send({
            message: "Password changed successfully",
          });
        }
      }
    );
  };

  // get all artefacts function for route: '/data'
const allData = (req, res) => {
    Artefact.find()
      .then((artefactRecords) => {
        res.status(200).send({
          message: "Successful in getting artefacts",
          artefactRecords,
        });
      })
      .catch((error) => {
        res.status(500).send({
          message: "Error upon getting artefacts",
          error,
        });
      });
  };

  // basic search function for route: '/search-artefacts/:query'
const searchFuzzy = async (req, res) => {
    // tries to find artefacts that matches the query
    // search index is based on <category> and <associated> fields
    Artefact.aggregate([
      {
        $search: {
          index: "fuzzy_index",
          text: {
            path: [
              "associated.person",
              "category.category_name",
              "artefactName",
              "description",
            ],
            query: req.params.query,
            fuzzy: {
              maxEdits: 2,
              maxExpansions: 250,
            },
          },
        },
      },
    ])
      .then((artefactRecords) => {
        if (artefactRecords.length == 0) {
          // no artefact matchd the query
          res.status(200).send({
            message: "Search query success with 0 artefacts",
            artefactRecords,
          });
        } else {
          // 1 or more artefacts matches the query
          res.status(200).send({
            message:
              "Search query success with " +
              artefactRecords.length +
              " artefacts",
            artefactRecords,
          });
        }
      })
      .catch((error) => {
        res.status(500).send({
          message: "Error upon searching",
          error,
        });
      });
  };